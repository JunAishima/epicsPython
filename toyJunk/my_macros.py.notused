from beamline_support import *
from threading import Timer

global timer_interval

#some examples

def hi_macro():
  print "hey from macros\n"



###setup a callback on counter channel #2
def counter_eventCb(epics_args, user_args):
  print epics_args['pv_value']


def monitor_counter2():
  channel2_pv = pvCreate("x12c:scaler1.S2")
  add_callback(channel2_pv,counter_eventCb,"")



######## example macro that does a relative scan on a motor given the scan parameters
def scan_relative(mcode,start,end,numsteps,datafile_prefix):
  set_scan_linear(mcode)
  set_scanstart(mcode,start)
  set_scanend(mcode,end)
  set_scanpoints(mcode,numsteps)
  newfile(datafile_prefix)
  dscan(mcode)


######################### a counter feedback timer thread example**************
# "counter_feedback 1 counts" at the command prompt will cause it to take a count (.1 seconds)
# every 1 second and log the results to a "counts" file
# "set_timer_interval 0" will stop the thread, a non-zero in the second argument will change the interval

def counter_feedback(interval,datafile_prefix):
  datafile_name = newfile(datafile_prefix)
  set_timer_interval(interval)
  counter_feedback_timer(datafile_name)
  

def counter_feedback_timer(filename):
  global timer_interval
  
  count_result_list = []
  if (timer_interval == 0):
    return
  else:
    saved_count_time = get_count_time()
    wait_for_scan()  #suspend this if someone is scanning
    count_result_list = get_counts(.1)
    set_count_time(saved_count_time)
    datafile = open(filename,"a+")
    for i in range (0,len(count_result_list)):
      datafile.write("%d " % (count_result_list[i]))
    datafile.write("\n")
    datafile.close()
    Timer(timer_interval,counter_feedback_timer,args=[filename]).start()


def set_timer_interval(val):
  global timer_interval
  
  timer_interval = float(val)

##########################

def feedback(motor_code,step_size,counter_number,iterations):
  global CNT
        
  stepsize = float(step_size)
  counter = int(counter_number)
  numloops = int(iterations)
  saved_count_time = get_count_time()
  wait_for_scan()  #suspend this if someone is scanning
  count_result_list = get_counts(.1)
  set_count_time(saved_count_time)
  count_old = count_result_list[counter-1]
  mvr(motor_code,stepsize)  
  for i in range(0,numloops):
    time.sleep(.5)    
    saved_count_time = get_count_time()
    wait_for_scan()  #suspend this if someone is scanning
    count_result_list = get_counts(.1)
    set_count_time(saved_count_time)
    count = count_result_list[counter-1]
    if (count < count_old):
      stepsize = (-1)*stepsize;
    mvr(motor_code,stepsize)
    count_old = count

def motor_scan(motname,inc,numsteps,ctime,counter_num,end_code):  #end code - 0=startpos,1=peak
  scan_step = float(inc)
  count_time = float(ctime)
  numpoints = int(numsteps)
  scan_width = (numpoints-1) * scan_step
  half_scan_width = -scan_width /2.0
  current_filename = newfile("scan_results")
  if (1):  #maybe check something later
    results_file = open(current_filename,"w")    
    startpos = get_motor_pos(motname)
    print "startpos in scan = ",startpos
    mvr(motname,half_scan_width)    
#    plot_lib2.plot_init()
    for i in range (0,numpoints):
      count_list = get_counts(count_time)
#      for j in range(2,plot_lib2.number_of_counter_readouts):      
#        plot_lib2.plot_results(j-1,query_mot_pos(motname),count_list[j])
      results = "%f %d\n" % (get_motor_pos(motname),count_list[int(counter_num)-1])
      results_file.write(results)
      mvr(motname,scan_step)
    results_file.close()
    if (int(end_code) == 1):
      results_file = open(current_filename,"r")
      max_count = 0
      max_mot_pos = startpos
      for result_line in results_file.readlines():
        tokens = split(result_line)
        if (int(tokens[1]) > max_count):
          max_count = int(tokens[1])
          max_mot_pos = float(tokens[0])
      results_file.close()
      print "max count = ",max_count,"max pos = ",max_mot_pos
      mva(motname,max_mot_pos)        
    else:
      mva(motname,startpos)          

    

